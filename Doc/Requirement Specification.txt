1. Overview
    
    This is a memory game playable in any modern day browser.
    Technologies used for the game and it's presentation are: HTML, CSS and JavaScript.

   The goal of this project is to provide a beautiful, easily accesibble, simple version of the classic memory game.
   Playing memory games can improve the player's short-term memory, dexterity, reaction time, precision and strategy.
   In many modern systems the developers focus on cramming in as much functionality as possible, often sacraficing performance,
   simplicity or accesibility. Our simple memory game provides a stress-free enviorement to play a game with no timers,
   no scores or leaderboards to minimize the potential of feeling rushed or judged.

2. Current State
    current state we have a plan of a memory game , for now we have everthing to make a game and its functions.
    This memory game is different from other normal games, this game is example in  which  u can not get frustrated, 

3. Dream system
    this game will be availbale on on our website , u can download it for free , this game is a memory game that u can play in any modern browswer ,
    this game is made of webapplications JavaScript,HTMl and CSS,
    inside this game there are pictures and u have to find pairs of pictures by clicking the tiles.

4. Functional requirements
    New Game - The New Game function generates 16 tiles with unique IDs and hidden background images. 
    Upon pressing the New Game button on top of the screen
    
    ShowImg and HideImg - The ShowImg function reveals the given tile's hidden background image once the tile is clicked, 
    the HideImg function changes the tile back to the original state
    
    Check Status - This function checks if the same tile has been clicked twice and if it is, it flips back the tile.
    
    Hide Tile - Removes the tiles it recieves. This will be used when a match is found
    
    Flip - Handles tile flipping and matching logics, controls the amount of tiles that can be revealed at the same time

5. System rules, patterns, recommendations.
    For this project we are gonna be using HTML and CSS because it is a web based application
    and also JavaScript to handle the project's mechanics,
    like the dynamic tile generation when starting a new game.

6. Current business flow model.
    We have 8 images that are assigned to 2 tiles each on a 4x4 grid. 
    Goal of the game is to find all of the pairs. 
    Clicking a tile while having one revealed, will reveal the second one and check if they match up.
    If they do, both tiles are removed from the screen. If they don't, the pictures are hidden again, and the next round starts.
    If the player finds all the pairs, the game is over.
    Clicking the "new game" button resets the game.

7. Required business flow
    If we want to make this game bigger,we can just download more images,reshape them,it will be harder

8. List of requirements
    Due to the simplicity of the app, it could be considered a single big module.
    This big module contains the game itself. It's functions are:
    
    To provide the game interface, including the clickable tiles and the design of the page.
    This is done with a combination of JavaScript, HTML and CSS. CSS and HTML creates the basic structure of the
    interface that the browser can interpret, while JavaScript is responsible for the dynamic generation of said tiles.

    The tiles themselves are simple html elements that have a JavaScript function assigned to when they are clicked by the user.
    This fucntion then internally handles the calls to animation, and all of the business logic associated with the memory game.

    Finally, the "New Game" button simply serves as a quick way to reset the game to it's starting state, while also re-shuffling
    the images associated with each tile as to make the game a bit more interesting and avoid the problem of certain users
    knowing all the combinations ahead of time.

9. Reports
    Upon clicking the New Game button, the app generates 16 new tiles with randomized pictures on the back.
    
    If two tiles are selected that don't match, the tiles are flipped back over and the user is able to select new tiles.
    
    Once the user finds a matching pair, the tiles vanish from the board.
    
    If the same tile is selected twice, the tile flips on the first click, but stays the same on the second click.

10. Glossary
    
